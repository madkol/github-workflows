name: build-push-update-manifests

env:
  REGISTRY: jed.ocir.io
  env_var_name_mapping: >
    {
      "prod": "production",
      "stg": "staging",
      "dev": "development",
    }

on:
  workflow_call:
    inputs:
      SITE_URL:
        required: false
        type: string
      BASE_API_URL:
        required: false
        type: string
      APP_BASE_URL:
        required: false
        type: string
      SENTRY_IGNORE_ERRORS:
        required: false
        type: string
      SENTRY_DEBUG:
        required: false
        type: string
        default: 'false'
      SENTRY_TRACES_SAMPLE_RATE:
        required: false
        type: string
        default: '0.1'
      REPLAYS_ON_ERROR_SAMPLE_RATE:
        required: false
        type: string
        default: '0.1'
      REACT_APP_APPLE_PAY_VERSION_NUMBER:
        required: false
        type: string
        default: '3'
      REACT_APP_APPLE_PAY_MERCHANT_ID:
        required: false
        type: string
        default: 'madkhol'
      REACT_APP_APPLE_PAY_MERCHANT_DISPLAY:
        required: false
        type: string
        default: 'Madkhol'
      REACT_APP_SEGMENT_WRITE_KEY:
        required: false
        type: string

    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_TOKEN:
        required: true
      INFRA_REPO_SSH_KEY:
        required: true
      NPM_TOKEN:
        required: true
      SENTRY_DSN:
        required: false

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      sha8: ${{ steps.prepare-vars.outputs.sha8 }}
      ref_name_truncated: ${{ steps.prepare-vars.outputs.ref_name_truncated }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Prepare variables
        id: prepare-vars
        run: |
          short_sha=$(echo ${GITHUB_SHA} | cut -c1-8)
          echo "sha8=$short_sha" >> $GITHUB_OUTPUT

          # Remove /feature Prefix from ${{ github.head_ref }}
          ref_name=${{ github.head_ref }}
          ref_name_truncated=${ref_name#feature/}
          echo "ref_name_truncated=$ref_name_truncated" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/axvp4vawnqyw/${{ github.event.repository.name }}

      - name: Login to REGISTRY
        if: startsWith(github.head_ref, 'feature/') || contains(fromJSON('["dev", "stg", "prod"]'), github.ref_name)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
          registry: ${{ env.REGISTRY }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          push: ${{ startsWith(github.head_ref, 'feature/') || contains(fromJSON('["dev", "stg", "prod"]'), github.ref_name) }}
          tags: ${{ env.REGISTRY }}/axvp4vawnqyw/${{ github.event.repository.name }}:${{ steps.prepare-vars.outputs.sha8 }}
          labels: ${{ steps.meta.outputs.labels }}
          # Couldn't find a way to make this accept any arbitrary variables, so it will assign all possible variables
          build-args: |
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            SITE_URL=${{ inputs.SITE_URL }}
            BASE_API_URL=${{ inputs.BASE_API_URL }}
            APP_BASE_URL=${{ inputs.APP_BASE_URL }}
            REACT_APP_BASE_API_URL=${{ inputs.BASE_API_URL }}
            REACT_APP_ENVIRONMENT=${{ fromJSON(env.env_var_name_mapping)[github.ref_name] || steps.prepare-vars.outputs.ref_name_truncated }}
            REACT_APP_SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            REACT_APP_SENTRY_DEBUG=${{ inputs.SENTRY_DEBUG }}
            REACT_APP_SENTRY_IGNORE_ERRORS=${{ inputs.SENTRY_IGNORE_ERRORS }}
            REACT_APP_SENTRY_TRACES_SAMPLE_RATE=${{ inputs.SENTRY_TRACES_SAMPLE_RATE }}
            REACT_APP_SENTRY_REPLAYS_ON_ERROR_SAMPLE_RATE=${{ inputs.REPLAYS_ON_ERROR_SAMPLE_RATE }}
            REACT_APP_APPLE_PAY_VERSION_NUMBER=${{ inputs.REACT_APP_APPLE_PAY_VERSION_NUMBER }}
            REACT_APP_APPLE_PAY_MERCHANT_ID=${{ inputs.REACT_APP_APPLE_PAY_MERCHANT_ID }}
            REACT_APP_APPLE_PAY_MERCHANT_DISPLAY=${{ inputs.REACT_APP_APPLE_PAY_MERCHANT_DISPLAY }}
            REACT_APP_SEGMENT_WRITE_KEY=${{ inputs.REACT_APP_SEGMENT_WRITE_KEY }}

  update-manifests:
    runs-on: ubuntu-latest
    needs: build-push
    concurrency:
      group: update-manifests # to prevent this job from running multiple times at the sametime
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v3
        with:
          repository: madkol/Infrastructure
          ssh-key: "${{ secrets.INFRA_REPO_SSH_KEY }}"
        if: github.event_name != 'pull_request'

      - name: Split repository name
        uses: jungwinter/split@v2
        id: split-repo-name
        with:
          msg: ${{ github.event.repository.name }}
          separator: '-'
          maxsplit: '1'

      ### Feature Branch Env ###
      ### Deploy ###
      - name: Update manifests images tag for feature branch ${{ needs.build-push.outputs.ref_name_truncated }}
        working-directory: helm-releases/${{ steps.split-repo-name.outputs._0 }}
        run: |
          # Make sure all services have this feature branch files
          find . -type d -exec touch {}/${{ needs.build-push.outputs.ref_name_truncated }}.yaml \;

          echo "Make sure all services have this feature branch files done"

          # if there is no image tag var add it otherwise update image tag using sed
          if ! grep -Ezq 'image:\n  tag: "[a-zA-Z0-9]{4,10}"' ${{ steps.split-repo-name.outputs._1 }}/${{ needs.build-push.outputs.ref_name_truncated }}.yaml ; then
            # Add Helm values image tag
            echo -e 'image:\n  tag: "${{ needs.build-push.outputs.sha8 }}"' > ${{ steps.split-repo-name.outputs._1 }}/${{ needs.build-push.outputs.ref_name_truncated }}.yaml
          else
            # Update Helm values image tag
            sed -i --regexp-extended 's|^  tag: "[a-zA-Z0-9]{4,10}"|  tag: "${{ needs.build-push.outputs.sha8 }}"|g' ${{ steps.split-repo-name.outputs._1 }}/${{ needs.build-push.outputs.ref_name_truncated }}.yaml
          fi
          echo "if there is no image tag var add it otherwise update image tag using sed done"

          if [[ ! -e defaults-${{ needs.build-push.outputs.ref_name_truncated }}.values.yaml ]]; then
              curl -o /usr/local/bin/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.11.5/gomplate_linux-amd64-slim
              chmod 755 /usr/local/bin/gomplate
              ENVIRONMENT_NAME=${{ needs.build-push.outputs.ref_name_truncated }} gomplate -f defaults-feature-branch-env.yaml.gotmpl > defaults-${{ needs.build-push.outputs.ref_name_truncated }}.values.yaml
          fi
        if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == false

      - name: Deploy Application Helm chart
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade --kube-context madkhol-dev --create-namespace --dependency-update --timeout 15m -i madkhol-${{ needs.build-push.outputs.ref_name_truncated }} -n madkhol-${{ needs.build-push.outputs.ref_name_truncated }} helm-charts/madkhol/ -f helm-releases/${{ steps.split-repo-name.outputs._0 }}/defaults.values.yaml,helm-releases/${{ steps.split-repo-name.outputs._0 }}/defaults-${{ needs.build-push.outputs.ref_name_truncated }}.values.yaml
          kubeconfig: '${{ secrets.KUBECONFIG }}'
        if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == false

      ### Feature Branch Env ###
      ### Delete Env ###

      - name: Update manifests images tag for feature branch ${{ needs.build-push.outputs.ref_name_truncated }}
        working-directory: helm-releases/${{ steps.split-repo-name.outputs._0 }}
        run: |
          # Delete all files to this feature branch
          find . -name "*${{ needs.build-push.outputs.ref_name_truncated }}*.yaml" -type f -delete
        if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == true

      - name: Delete Application Helm chart
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm delete --kube-context madkhol-dev madkhol-${{ needs.build-push.outputs.ref_name_truncated }} -n madkhol-${{ needs.build-push.outputs.ref_name_truncated }}
          kubeconfig: '${{ secrets.KUBECONFIG }}'
        if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == true

      - uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: --context madkhol-dev delete namespace madkhol-${{ needs.build-push.outputs.ref_name_truncated }}
        if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == true

      ### dev, stg and prod envs
      - name: Update manifests images tag for ["dev", "stg", "prod"] branches
        working-directory: helm-releases/${{ steps.split-repo-name.outputs._0 }}/${{ steps.split-repo-name.outputs._1 }}
        run: |
          # Change Helm values image tag
          sed -i --regexp-extended 's|^  tag: "[a-zA-Z0-9]{4,10}"|  tag: "${{ needs.build-push.outputs.sha8 }}"|g' ${{ github.ref_name }}.yaml
        if: contains(fromJSON('["dev", "stg", "prod"]'), github.ref_name)

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Apply automatic changes for helm-releases/${{ steps.split-repo-name.outputs._0 }}/${{ steps.split-repo-name.outputs._1 }}
        if: startsWith(github.head_ref, 'feature/') || contains(fromJSON('["dev", "stg", "prod"]'), github.ref_name)
